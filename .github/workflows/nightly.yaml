name: Nightly Releases

# TODO: use schedule
on:
  push:
    branches: [fix-ci]

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Release
        id: release_specs
        run: |
          BODY="This prerelease was autogenerated from the \`devel\` branch on $(date --iso). \
          It should not be expected to be stable. \
          If some binaries are missing then it is probably because the build \
          failed for those binaries."

          # Escape BODY string to set it as GitHub Actions output
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"

          echo "::set-output name=title::Nightly Build $(date --iso)"
          echo "::set-output name=body::$BODY"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.release_specs.outputs.title }}
          body: ${{ steps.release_specs.outputs.body }}
          draft: true
          prerelease: true

      - name: Print URL
        run: |
          echo "URL: ${{ steps.create_release.outputs.upload_url }}"
          echo "ref: ${{ github.ref }}"

  create_assets:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-latest, target: local}

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/compile
        with:
          target: ${{ matrix.local }}

      - name: Upload Binary
        shell: bash
        run: |
          COMMIT="$GITHUB_SHA"
          echo "commit hash: $COMMIT"

          RELEASES="$(curl --silent --show-error --fail \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/samuelsadok/fibre/releases")"

          upload_url="$(echo "$RELEASES" | jq -r '.[] | select(.target_commitish == "'$COMMIT'") | .upload_url')"
          echo "upload_url: $upload_url"

          BINARY="$(ls cpp | grep "libfibre-" | head)"
          
          URL="$(echo "$upload_url" | sed 's/assets.*$/assets/')?name=$BINARY"
          echo "uploading $BINARY to $URL" >&2

          curl --silent --show-error --fail \
            -H "Content-Type: application/octet-stream" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --data-binary @"cpp/$BINARY" \
            "$URL"

  finalize_release:
    needs: create_assets
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        shell: bash
        run: |
          COMMIT="$GITHUB_SHA"
          echo "commit hash: $COMMIT"

          RELEASES="$(curl --silent --show-error --fail \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/samuelsadok/fibre/releases")"

          id="$(echo "$RELEASES" | jq -r '.[] | select(.target_commitish == "'$COMMIT'") | .id')"
          echo "release id: $id"

          curl --silent --show-error --fail \
            -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"draft":false}' \
            "https://api.github.com/repos/samuelsadok/fibre/releases/$id"

          # TODO: delete old nightly releases
